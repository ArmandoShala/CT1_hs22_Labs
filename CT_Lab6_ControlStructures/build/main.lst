


ARM Macro Assembler    Page 1 


    1 00000000         ;* -----------------------------------------------------
                       -------------
    2 00000000         ;* --  _____       ______  _____                        
                                   -
    3 00000000         ;* -- |_   _|     |  ____|/ ____|                       
                                   -
    4 00000000         ;* --   | |  _ __ | |__  | (___    Institute of Embedded
                        Systems    -
    5 00000000         ;* --   | | | '_ \|  __|  \___ \   Zurich University of 
                                   -
    6 00000000         ;* --  _| |_| | | | |____ ____) |  Applied Sciences     
                                   -
    7 00000000         ;* -- |_____|_| |_|______|_____/   8401 Winterthur, Swit
                       zerland     -
    8 00000000         ;* -----------------------------------------------------
                       -------------
    9 00000000         ;* --
   10 00000000         ;* -- Project     : CT1 - Lab 7
   11 00000000         ;* -- Description : Control structures
   12 00000000         ;* -- 
   13 00000000         ;* -- $Id: main.s 3748 2016-10-31 13:26:44Z kesr $
   14 00000000         ;* -----------------------------------------------------
                       -------------
   15 00000000         
   16 00000000         ; ------------------------------------------------------
                       -------------
   17 00000000         ; -- Constants
   18 00000000         ; ------------------------------------------------------
                       -------------
   19 00000000         
   20 00000000                 AREA             myCode, CODE, READONLY
   21 00000000         
   22 00000000                 THUMB
   23 00000000         
   24 00000000 60000100 
                       ADDR_LED_15_0
                               EQU              0x60000100
   25 00000000 60000102 
                       ADDR_LED_31_16
                               EQU              0x60000102
   26 00000000 60000114 
                       ADDR_7_SEG_BIN_DS1_0
                               EQU              0x60000114
   27 00000000 60000200 
                       ADDR_DIP_SWITCH_15_0
                               EQU              0x60000200
   28 00000000 60000211 
                       ADDR_HEX_SWITCH
                               EQU              0x60000211
   29 00000000 0000000C 
                       NR_CASES
                               EQU              0xC
   30 00000000         
   31 00000000         jump_table                           ; ordered table con
                                                            taining the labels 
                                                            of all cases
   32 00000000         ; STUDENTS: To be programmed 
   33 00000000 00000000        DCD              case_dark
   34 00000004 00000000        DCD              case_add



ARM Macro Assembler    Page 2 


   35 00000008 00000000        DCD              case_subs
   36 0000000C 00000000        DCD              case_uMuls
   37 00000010 00000000        DCD              case_and
   38 00000014 00000000        DCD              case_or
   39 00000018 00000000        DCD              case_xor
   40 0000001C 00000000        DCD              case_not
   41 00000020 00000000        DCD              case_nand
   42 00000024 00000000        DCD              case_nor
   43 00000028 00000000        DCD              case_xnor
   44 0000002C 00000000        DCD              case_bright
   45 00000030         ; END: To be programmed
   46 00000030         
   47 00000030         ; ------------------------------------------------------
                       -------------
   48 00000030         ; -- Main
   49 00000030         ; ------------------------------------------------------
                       -------------
   50 00000030         
   51 00000030         main    PROC
   52 00000030                 EXPORT           main
   53 00000030         
   54 00000030         read_dipsw                           ; Read operands int
                                                            o R0 and R1 and dis
                                                            play on LEDs
   55 00000030         ; STUDENTS: To be programmed
   56 00000030 4A17            LDR              R2, =ADDR_DIP_SWITCH_15_0 ; Loa
                                                            d the Addr of the D
                                                            IP switches into R2
                                                            
   57 00000032 7810            LDRB             R0, [R2]    ; Load the second 8
                                                             bits into R0 (Oper
                                                            ant 2)
   58 00000034 7851            LDRB             R1, [R2, #1] ; Load the first 8
                                                             bits into R1 (Oper
                                                            ant 1)
   59 00000036         
   60 00000036 4B17            LDR              R3, =ADDR_LED_15_0 ; Load the A
                                                            ddr of the LEDs int
                                                            o R3
   61 00000038         
   62 00000038 7018            STRB             R0, [R3]    ; Store the first 8
                                                             bits into the LEDs
                                                            
   63 0000003A 7059            STRB             R1, [R3, #1] ; Store the second
                                                             8 bits into the LE
                                                            Ds (Offset +1 becau
                                                            se the next Addr is
                                                             the one for the by
                                                            tes, not +8)
   64 0000003C         ; END: To be programmed
   65 0000003C         
   66 0000003C         read_hexsw                           ; Read operation in
                                                            to R2 and display o
                                                            n 7seg.
   67 0000003C         ; STUDENTS: To be programmed
   68 0000003C 4A16            LDR              R2, =ADDR_HEX_SWITCH ; Start wi
                                                            th 0 in R2
   69 0000003E 260F            MOVS             R6, #0x0F   ; Load 0x0F into R6
                                                             (Mask upper bits)



ARM Macro Assembler    Page 3 


   70 00000040 7812            LDRB             R2, [R2]    ; Load the value of
                                                             the Hex Switches i
                                                            nto R2
   71 00000042 4032            ANDS             R2, R2, R6  ; AND R2 with R6
   72 00000044 4C15            LDR              R4, =ADDR_7_SEG_BIN_DS1_0 ; Loa
                                                            d the Addr of the 7
                                                            seg into R4
   73 00000046 6022            STR              R2, [R4]    ; Store R2 in the 7
                                                            seg
   74 00000048         ; END: To be programmed
   75 00000048         
   76 00000048         case_switch                          ; Implement switch 
                                                            statement as shown 
                                                            on lecture slide
   77 00000048         ; STUDENTS: To be programmed
   78 00000048 2A0C            CMP              R2, #NR_CASES ; Compare R2 with
                                                             the number of case
                                                            s
   79 0000004A D21B            BHS              case_bright ; If R2 is bigger o
                                                            r equal to the numb
                                                            er of cases, jump t
                                                            o case_default
   80 0000004C         ;LSLS   R2, #2                               ; Shift R2 
                       left by 2 bits
   81 0000004C 4B14            LDR              R3, =jump_table ; Load the Addr
                                                             of the jump table 
                                                            into R3
   82 0000004E 58BF            LDR              R7, [R7, R2] ; Load the Addr of
                                                             the case into R7
   83 00000050 4738            BX               R7          ; Jump to the label
                                                             in the jump table
   84 00000052         ; END: To be programmed
   85 00000052         
   86 00000052         
   87 00000052         ; Add the code for the individual cases below
   88 00000052         ; - operand 1 in R0
   89 00000052         ; - operand 2 in R1
   90 00000052         ; - result in R0
   91 00000052         
   92 00000052         case_dark
   93 00000052 4814            LDR              R0, =0
   94 00000054 E018            B                display_result
   95 00000056         
   96 00000056         case_add
   97 00000056 1840            ADDS             R0, R0, R1
   98 00000058 E016            B                display_result
   99 0000005A         
  100 0000005A         case_subs
  101 0000005A 1A40            SUBS             R0, R0, R1
  102 0000005C E014            B                display_result
  103 0000005E         
  104 0000005E         case_uMuls
  105 0000005E 4348            MULS             R0, R1, R0
  106 00000060 E012            B                display_result
  107 00000062         
  108 00000062         case_and
  109 00000062 4008            ANDS             R0, R0, R1
  110 00000064 E010            B                display_result
  111 00000066         



ARM Macro Assembler    Page 4 


  112 00000066         case_or
  113 00000066 4308            ORRS             R0, R0, R1
  114 00000068 E00E            B                display_result
  115 0000006A         
  116 0000006A         case_xor
  117 0000006A 4048            EORS             R0, R0, R1
  118 0000006C E00C            B                display_result
  119 0000006E         
  120 0000006E         case_not
  121 0000006E 43C0            MVNS             R0, R0
  122 00000070 E00A            B                display_result
  123 00000072         
  124 00000072         
  125 00000072         case_nand
  126 00000072 4008            ANDS             R0, R0, R1
  127 00000074 43C0            MVNS             R0, R0
  128 00000076 E007            B                display_result
  129 00000078         
  130 00000078         case_nor
  131 00000078 4308            ORRS             R0, R0, R1
  132 0000007A 43C0            MVNS             R0, R0
  133 0000007C E004            B                display_result
  134 0000007E         
  135 0000007E         case_xnor
  136 0000007E 4048            EORS             R0, R0, R1
  137 00000080 43C0            MVNS             R0, R0
  138 00000082 E001            B                display_result
  139 00000084         
  140 00000084         case_bright
  141 00000084 4808            LDR              R0, =0xFFFF
  142 00000086 E7FF            B                display_result
  143 00000088         
  144 00000088         ; STUDENTS: To be programmed
  145 00000088         
  146 00000088         
  147 00000088         ; END: To be programmed
  148 00000088         
  149 00000088         
  150 00000088         display_result                       ; Display result on
                                                             LEDs
  151 00000088         ; STUDENTS: To be programmed
  152 00000088 4F08            LDR              R7, =ADDR_LED_31_16 ; Load the 
                                                            Addr of the LEDs in
                                                            to R7
  153 0000008A 7038            STRB             R0, [R7]    ; Store the first 8
                                                             bits into the LEDs
                                                            
  154 0000008C         
  155 0000008C         ; END: To be programmed
  156 0000008C         
  157 0000008C E7D0            B                read_dipsw
  158 0000008E         
  159 0000008E 00 00           ALIGN
  160 00000090                 ENDP
  161 00000090         
  162 00000090         ; ------------------------------------------------------
                       -------------
  163 00000090         ; -- End of file
  164 00000090         ; ------------------------------------------------------



ARM Macro Assembler    Page 5 


                       -------------                      
  165 00000090                 END
              60000200 
              60000100 
              60000211 
              60000114 
              00000000 
              00000000 
              0000FFFF 
              60000102 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --depend=.\bu
ild\main.d -o.\build\main.o -I.\RTE\_Target_1 -IC:\Users\armandoshala\AppData\L
ocal\Arm\Packs\InES\CTBoard14_DFP\4.0.2\Device\Include -IC:\Users\armandoshala\
AppData\Local\Arm\Packs\InES\CTBoard14_DFP\4.0.2\Device\Include\m0 -IC:\Users\a
rmandoshala\AppData\Local\Arm\Packs\InES\CTBoard14_DFP\4.0.2\HAL\Include --pred
efine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 537" --predefine="_RT
E_ SETA 1" --predefine="_RTE_ SETA 1" --list=.\build\main.lst app\main.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

case_add 00000056

Symbol: case_add
   Definitions
      At line 96 in file app\main.s
   Uses
      At line 34 in file app\main.s
Comment: case_add used once
case_and 00000062

Symbol: case_and
   Definitions
      At line 108 in file app\main.s
   Uses
      At line 37 in file app\main.s
Comment: case_and used once
case_bright 00000084

Symbol: case_bright
   Definitions
      At line 140 in file app\main.s
   Uses
      At line 44 in file app\main.s
      At line 79 in file app\main.s

case_dark 00000052

Symbol: case_dark
   Definitions
      At line 92 in file app\main.s
   Uses
      At line 33 in file app\main.s
Comment: case_dark used once
case_nand 00000072

Symbol: case_nand
   Definitions
      At line 125 in file app\main.s
   Uses
      At line 41 in file app\main.s
Comment: case_nand used once
case_nor 00000078

Symbol: case_nor
   Definitions
      At line 130 in file app\main.s
   Uses
      At line 42 in file app\main.s
Comment: case_nor used once
case_not 0000006E

Symbol: case_not
   Definitions
      At line 120 in file app\main.s
   Uses
      At line 40 in file app\main.s
Comment: case_not used once
case_or 00000066




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: case_or
   Definitions
      At line 112 in file app\main.s
   Uses
      At line 38 in file app\main.s
Comment: case_or used once
case_subs 0000005A

Symbol: case_subs
   Definitions
      At line 100 in file app\main.s
   Uses
      At line 35 in file app\main.s
Comment: case_subs used once
case_switch 00000048

Symbol: case_switch
   Definitions
      At line 76 in file app\main.s
   Uses
      None
Comment: case_switch unused
case_uMuls 0000005E

Symbol: case_uMuls
   Definitions
      At line 104 in file app\main.s
   Uses
      At line 36 in file app\main.s
Comment: case_uMuls used once
case_xnor 0000007E

Symbol: case_xnor
   Definitions
      At line 135 in file app\main.s
   Uses
      At line 43 in file app\main.s
Comment: case_xnor used once
case_xor 0000006A

Symbol: case_xor
   Definitions
      At line 116 in file app\main.s
   Uses
      At line 39 in file app\main.s
Comment: case_xor used once
display_result 00000088

Symbol: display_result
   Definitions
      At line 150 in file app\main.s
   Uses
      At line 94 in file app\main.s
      At line 98 in file app\main.s
      At line 102 in file app\main.s
      At line 106 in file app\main.s
      At line 110 in file app\main.s
      At line 114 in file app\main.s
      At line 118 in file app\main.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 122 in file app\main.s
      At line 128 in file app\main.s
      At line 133 in file app\main.s
      At line 138 in file app\main.s
      At line 142 in file app\main.s

jump_table 00000000

Symbol: jump_table
   Definitions
      At line 31 in file app\main.s
   Uses
      At line 81 in file app\main.s
Comment: jump_table used once
main 00000030

Symbol: main
   Definitions
      At line 51 in file app\main.s
   Uses
      At line 52 in file app\main.s
Comment: main used once
myCode 00000000

Symbol: myCode
   Definitions
      At line 20 in file app\main.s
   Uses
      None
Comment: myCode unused
read_dipsw 00000030

Symbol: read_dipsw
   Definitions
      At line 54 in file app\main.s
   Uses
      At line 157 in file app\main.s
Comment: read_dipsw used once
read_hexsw 0000003C

Symbol: read_hexsw
   Definitions
      At line 66 in file app\main.s
   Uses
      None
Comment: read_hexsw unused
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ADDR_7_SEG_BIN_DS1_0 60000114

Symbol: ADDR_7_SEG_BIN_DS1_0
   Definitions
      At line 26 in file app\main.s
   Uses
      At line 72 in file app\main.s
Comment: ADDR_7_SEG_BIN_DS1_0 used once
ADDR_DIP_SWITCH_15_0 60000200

Symbol: ADDR_DIP_SWITCH_15_0
   Definitions
      At line 27 in file app\main.s
   Uses
      At line 56 in file app\main.s
Comment: ADDR_DIP_SWITCH_15_0 used once
ADDR_HEX_SWITCH 60000211

Symbol: ADDR_HEX_SWITCH
   Definitions
      At line 28 in file app\main.s
   Uses
      At line 68 in file app\main.s
Comment: ADDR_HEX_SWITCH used once
ADDR_LED_15_0 60000100

Symbol: ADDR_LED_15_0
   Definitions
      At line 24 in file app\main.s
   Uses
      At line 60 in file app\main.s
Comment: ADDR_LED_15_0 used once
ADDR_LED_31_16 60000102

Symbol: ADDR_LED_31_16
   Definitions
      At line 25 in file app\main.s
   Uses
      At line 152 in file app\main.s
Comment: ADDR_LED_31_16 used once
NR_CASES 0000000C

Symbol: NR_CASES
   Definitions
      At line 29 in file app\main.s
   Uses
      At line 78 in file app\main.s
Comment: NR_CASES used once
6 symbols
360 symbols in table
